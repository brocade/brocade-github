(ns github.page
  (:require
    [sablono.core :as sab :include-macros true]
    [goog.dom :as gdom]
    [om.dom :as dom]
    [om.next :as om :refer-macros [defui]]
    [ajax.core :refer [GET] :as ajax]
    [github.state]
    [cljs.core.async :refer [put! chan <! >! close!]]
    )
  (:require-macros [cljs.core.async.macros :refer [go]]))

(enable-console-print!)

(declare git-cards)
(declare header-items)
(declare footer-body)
(declare footer-head)

;; (def repo-uri "https://raw.githubusercontent.com/gaberger/brocade-github/master/brocade/resources/public/app/app.edn")

;; (defn async-get
;;   [url]
;;   (let [ch (chan)]
;;     (GET url {:handler (fn [resp]
;;                          (put! ch resp))})
;;     ch))


;; Initialize Application State

(defonce app-state
  (atom
    github.state/page-state
    ))

(defn send-func
  [uri]
  {  :app/repo {:repo
             {:name "brocade",
              :html_url "https://github.com/brocade/brocade",
              :forks 1,
              :description "Brocade Openstack Quantum Plugin",
              :commiters [],
              :lastcommit "4123372a06aa2d26889f2987303b0634198f5807",
              :date "2013-06-03T18:39:46Z",
              :author "Shiv Haris",
              :email "sharis@brocade.com"}}})


(defmulti read om/dispatch)

(defmethod read :default
           [{:keys [state] :as env} key params]
           (let [st @state]
                (if-let [[_ value] (find st key)]
                        {:value value}
                        {:value :not-found})))

(defmethod read :app/header
           [{:keys [state] :as env} key params]
           {:value (:app/header @state)})

(defmethod read :app/footer
           [{:keys [state] :as env} key params]
           {:value (:app/footer @state)})


(defmethod read :app/repo
           [{:keys [state ast] :as env} key params]
  (let [st @state]
    (let [v (send-func "foo")
          _ (print v)]
      (if v
           {:value v :remote true}
           {:value v}

      ))))



;; (defmethod read :app/repo
;;            [{:keys [state ast] :as env} key params]
;;            {:value (:app/repo @state)})
;;   (go
;;     (let [ch (async-get repo-uri)
;;           response (<! ch)
;;           respvec (cljs.reader/read-string response)]
;;           {:value {:app/repo (:app/repo respvec)}}
;;         )
;;       )


(defn header-template
      [title items]
      (sab/html [:nav.brocade-red {:role "navigation"}
                  [:div.nav-wrapper.container
                   [:a.brand-logo {:href "" :id "logo-container"} [:h1.brocade-logo] ]
                   (header-items items)
                   [:a.button-collapse {:data-activates "nav-mobile"} [:i.material-icons "menu"]]
                  ]
                ]))

(defn header-items
      [items]
      (sab/html [[:ul.right.hide-on-med-and-down
                 (map
                   (fn [{:keys [title href]}]
                       [:li [:a {:href href} title]])
                   items)
                ]
                [:ul.side-nav {:id "nav-mobile"}
                 (map
                   (fn [{:keys [title href]}]
                       [:li [:a {:href href} title]])
                   items)
                ]]))


(defn main-template
      [repos]
      (sab/html
        [:div.container
         [:div.section
           [:div.row
             [:div.col.s12
               (git-cards repos)
             ]
           ]
         ]
        ])
      )


(defn repo-template
      [title desc main link]
      (sab/html
          [:div.col.s12.m6
            [:div.card.small
             [:div.card-content
              [:span.card-title title]
              [:p desc]
             ]
             [:div.card-action
               [:a {:href link} title]
             ]
            ]
          ]
        ))


;;  <div class="mdl-card__actions mdl-card--border">
;;     <a class="mdl-button mdl-button--colored mdl-js-button mdl-js-ripple-effect">
;;       Add to Calendar
;;     </a>
;;     <div class="mdl-layout-spacer"></div>
;;     <i class="material-icons">event</i>
;;   </div>



(defn git-cards
      [repos]
      (let [c (count repos)]
           (sab/html [:div.row
                       (map #(repo-template
                                 (get-in % [:repo :name])
                                 (get-in % [:repo :description])
                                 (get-in % [:repo :author])
                                 (get-in % [:repo :html_url])
                               ) repos)
                       ]))
      )


(defn footer-template
      [coll]
      (sab/html
        [:footer.page-footer.grey.darken-1
         [:div.container
          [:div.row
           [(footer-head coll)]
          ]
         ]
         [:div.footer-copyright
          [:div.container]
         ]
        ]
      )
)


(defn footer-head
      [coll]
      (map (fn [{:keys [heading items checked?]}]
               [:div.col.l4.s12
                [:h5.white-text heading]
                (footer-body items)])
           coll)
      )

(defn footer-body
      [items]
      (sab/html [:ul
                 (map
                   (fn [{:keys [title href]}]
                       [:li [:a.white-text {:href href} title]])
                   items)]))


(defui ^:once Page
  static om/IQuery
  (query [this]
<<<<<<< HEAD
;;          [:app/title :app/footer ]
         [:app/repo]
=======
         [:app/title :app/header :app/footer :app/repo]
>>>>>>> dar/develop
    ;{:github/root (om/get-query Repo)}
         )

    ;[:app/title :app/footer :github/root])
       Object
       (render [this]
               (let [{:keys [app/title app/header app/footer app/repo]} (om/props this)]
                    (sab/html
<<<<<<< HEAD
                      [:div.mdl-layout.mdl-js-layout.mdl-layout--fixed-header
                       [:p repo]
                       (header-template title)
=======
                      [:div
                       (header-template title header)
>>>>>>> dar/develop
                       (main-template repo)
                       (footer-template footer)]
                      ))))

(def parser (om/parser {:read read}))


;; (print (parser {:state app-state} [:app/repo]))
;; (parser {:state app-state} (om/get-query Repo))
;; (parser {:state app-state} (om/get-query Page))



;; (defui Repo
;;   static om/IQuery
;;   (query [_]
;;     '[:app/repo])
;;   Object
;;   (render [this]
;;     (let [{:keys [app/repo]} (om/props this)]
;;       (sab/html [:div
;;                  [:h2 "test"]
;;                  [:p repo]])
;;         )))


(def send-chan (chan))

(def reconciler
  (om/reconciler
    {:state app-state
     :parser (om/parser {:read read})
;;      :send (async-get repo-uri)
;;      :remotes [:remote :repo]
     }))

(om/add-root! reconciler Page (js/document.getElementById "app"))


;; (if (nil? @app-state)
;;     (let [target (js/document.getElementById "app")]
;;       (om/add-root! reconciler Page target)
;;       #_(reset! app-state Page))
;;     #_(om/force-root-render! reconciler)
;;     )
